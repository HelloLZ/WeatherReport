package com.ustcweather.amarishappilees;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.ustcweather.amarishappilees.db.DataBase;

import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;

public class CityFragment extends ListFragment{
	
	private static ExecutorService LIMITED_TASK_EXECUTOR  = (ExecutorService) Executors.newFixedThreadPool(1);
	private List<String> cityData = new ArrayList<String>();
	private ArrayAdapter<String> cityAdapter;
	private Cursor cityCursor;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		cityAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1, cityData);
		setListAdapter(cityAdapter);
	}
	
	@Override  
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {  

        View view = inflater.inflate(R.layout.fragment_city_list, null);  
        DataBase dataBase = new DataBase();

        Bundle bundle = this.getArguments();  
        if(bundle == null) {
        	return view;
        }
        cityCursor = dataBase.readCityDataBaseSDCard(bundle.getString("provinceName"));
        getData();  
        
        return view;  
    }  
	
	class CityAsyncTask extends AsyncTask<String, Integer, String[]> {

		@Override
		protected String[] doInBackground(String... params) {
			// TODO Auto-generated method stub	
			cityData.clear();
			while (cityCursor.moveToNext()) {
				String name =cityCursor.getString(cityCursor.getColumnIndex("city"));  
				cityData.add(name);
			}
			cityCursor.close();			
			return params;
		}

		@Override
		protected void onPostExecute(String[] result) {
			// TODO Auto-generated method stub			
			cityAdapter.notifyDataSetChanged();
		}
	}
	
	private  void getData() {
		CityAsyncTask task = new CityAsyncTask();
		task.executeOnExecutor(LIMITED_TASK_EXECUTOR);
	}
	
}
