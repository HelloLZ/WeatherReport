package com.ustcweather.amarishappilees.http;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.ustcweather.amarishappilees.weatherinfo.WeatherRelativeInfo;

public class DecodeJson {

	public DecodeJson() {

	}

	public static WeatherRelativeInfo getJsonInfo(String json) {
		// JSONObject decodeObject = JSONObject.fromObject(json);
		JSONObject jsonObj;
		try {
			jsonObj = new JSONObject(json);

			if (jsonObj.getInt("error") != 0) {
				return null;
			}
			// String status = jsonObj.getString("status");
			String date = jsonObj.getString("date");

			JSONArray results = jsonObj.getJSONArray("results");
			JSONObject results0 = results.getJSONObject(0);
			String currentCity = results0.getString("currentCity");
			String pm = results0.getString("pm25");
			
			/* Today weather information */
			JSONArray weatherData = results0.getJSONArray("weather_data");
			JSONObject weatherToday = weatherData.getJSONObject(0);
			String todayDate = weatherToday.getString("date");
			String todayWeather = weatherToday.getString("weather");
			String todayWind = weatherToday.getString("wind");
			String todayTempera = weatherToday.getString("temperature");

			/* Tomorrow weather information */
			JSONObject weatherTomorrow = weatherData.getJSONObject(1);
			String tomorrowDate = weatherTomorrow.getString("date");
			String tomorrowWeather = weatherTomorrow.getString("weather");
			String tomorrowTempera = weatherTomorrow.getString("temperature");

			/* The day after tomorrow weather information */
			JSONObject weatherAfTomo = weatherData.getJSONObject(2);
			String afTomoDate = weatherAfTomo.getString("date");
			String afTomoWeather = weatherAfTomo.getString("weather");
			String afTomoTempera = weatherAfTomo.getString("temperature");

			/* The last day weather information */
			JSONObject weatherLast = weatherData.getJSONObject(3);
			String lastDate = weatherLast.getString("date");
			String lastWeather = weatherLast.getString("weather");
			String lastTempera = weatherLast.getString("temperature");

			/* Set main information */
			WeatherRelativeInfo weatherReInfo = new WeatherRelativeInfo();
			weatherReInfo.setCurrentCity(currentCity);
			weatherReInfo.setDate(date);
			weatherReInfo.setPm(pm);
			weatherReInfo.setPmLevel(getPmLevel(pm));

			/* Set today weather information */
			weatherReInfo.setTodayDate(getTodayTempera(todayDate));
			weatherReInfo.setTodayTemperaUp(getTemperaUp(todayTempera));
			weatherReInfo.setTodayTemperaDown(getTemperaDown(todayTempera));
			// weatherReInfo.setTodayTemperaMore(todayTemperaMore);
			weatherReInfo.setTodayWeather(todayWeather);
			weatherReInfo.setTodayWindKind(getWindKind(todayWind));
			weatherReInfo.setTodayWindLevel(getWindLevel(todayWind));

			/* Set Tomorrow weather information */
			weatherReInfo.setTomorrowDate(tomorrowDate);
			weatherReInfo.setTomorrowTemperaUp(getTemperaUp(tomorrowTempera));
			weatherReInfo
					.setTomorrowTemperaDown(getTemperaDown(tomorrowTempera));
			weatherReInfo.setTomorrowWeather(tomorrowWeather);

			/* Set the day after tomorrow weather information */
			weatherReInfo.setAfTomoDate(afTomoDate);
			weatherReInfo.setAfTomoTemperaUp(getTemperaUp(afTomoTempera));
			weatherReInfo.setAfTomoTemperaDown(getTemperaDown(afTomoTempera));
			weatherReInfo.setAfTomoWeather(afTomoWeather);

			/* Set the last day weather information */
			weatherReInfo.setLastDate(lastDate);
			weatherReInfo.setLastTemperaUp(getTemperaUp(lastTempera));
			weatherReInfo.setLastTemperaDown(getTemperaDown(lastTempera));
			weatherReInfo.setLastWeather(lastWeather);

			return weatherReInfo;
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	private static String getTemperaUp(String tempera) {
		int position = tempera.indexOf('~');
		if (position == -1) {
			return "0";
		} else {
			tempera = tempera.substring(0, position - 1);
			return tempera;
		}
	}

	private static String getTemperaDown(String tempera) {
		int position = tempera.indexOf('~');
		if (position == -1) {
			tempera = tempera.substring(0, tempera.length() - 1);
		} else {
			tempera = tempera.substring(position + 2, tempera.length() - 1);
		}
		return tempera;
	}
	
	private static String getTodayTempera(String todayDate) {
		int position = todayDate.indexOf('：'); 
		todayDate = todayDate.substring(position+1, todayDate.length()-2);
		return todayDate;
	}
	
	private static String getWindKind(String wind) {
		int position = wind.indexOf('风');
		wind = wind.substring(0, position+1);
		return wind;
	}
	
	private static String getWindLevel(String wind) {
		int position = wind.indexOf('风');
		wind = wind.substring(position+1);
		if(wind.isEmpty()){
			return "未知";
		} else {
			return wind;
		}
	}
	
	private static String getPmLevel(String pm) {
		int level = 0;//Integer.parseInt(pm);
		if(level > 300) {
			return "严重污染";
		} 
		else if(level >200) {
			return "重度污染";
		}
		else if(level >150) {
			return "中度污染";
		}
		else if(level >100) {
			return "轻度污染";
		}
		else if(level >50) {
			return "良";
		}
		else if(level >= 0) {
			return "优";
		}
		else {
			return "未知";
		}
	}
}
